import os
import re
import asyncio
import logging
import random
import sqlite3
from datetime import datetime, timedelta
from typing import Optional, Dict, List, Set, Tuple, Any

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandObject
from aiogram.types import (
    ChatPermissions,
    Message,
    ChatMemberUpdated,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ChatAdministratorRights
)
from aiogram.enums import ChatMemberStatus, ChatType
from aiogram.utils.keyboard import InlineKeyboardBuilder
from logging.handlers import RotatingFileHandler

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
os.makedirs("data", exist_ok=True)
os.makedirs("logs", exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ö–æ—Å—Ç–∏–Ω–≥–∞
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        RotatingFileHandler("logs/bot.log", maxBytes=10485760, backupCount=5),  # 10MB per file, 5 backups
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN", "7271080423:AAHvrgBXya-82CRosyxkenpbfvO6LnNsnnA")
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "1014311717,7461610956").split(',')))
CHAT_ID = int(os.getenv("CHAT_ID", "-1002125767388"))
WARN_EXPIRE_DAYS = int(os.getenv("WARN_EXPIRE_DAYS", "7"))

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
MAX_ADS_PER_DAY = int(os.getenv("MAX_ADS_PER_DAY", "5"))
MIN_AD_INTERVAL_HOURS = float(os.getenv("MIN_AD_INTERVAL_HOURS", "1.5"))
MUTE_DURATION_DAYS = int(os.getenv("MUTE_DURATION_DAYS", "1"))
RULES_INTERVAL_HOURS = float(os.getenv("RULES_INTERVAL_HOURS", "1.5"))

MIN_AD_INTERVAL = timedelta(hours=MIN_AD_INTERVAL_HOURS)
MUTE_DURATION = timedelta(days=MUTE_DURATION_DAYS)
RULES_INTERVAL = timedelta(hours=RULES_INTERVAL_HOURS)

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–Ω–∞—Ç–æ–≤
DONATE_LINK = os.getenv("DONATE_LINK", "https://www.sberbank.com/sms/pbpn?requisiteNumber=2202208057115496")
DONATE_MESSAGE = """
‚ù§Ô∏è <b>–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑–≤–∏—Ç–∏–µ –±–æ—Ç–∞</b> ‚ù§Ô∏è

ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7 –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —É–ª—É—á—à–∞–µ—Ç—Å—è. 
–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞, –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–æ–Ω–∞—Ç!

üí≥ <b>–°–ø–æ—Å–æ–±—ã –ø–µ—Ä–µ–≤–æ–¥–∞:</b>
‚Ä¢ –°–±–µ—Ä–±–∞–Ω–∫: <code>2202208057115496</code>
‚Ä¢ –ü–æ —Å—Å—ã–ª–∫–µ: {donate_link}

üí∞ <b>–õ—é–±–∞—è —Å—É–º–º–∞ –ø—Ä–∏—è—Ç–Ω–∞ –∏ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç!</b>

üôè <i>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É!</i>
"""

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    db_path = "data/bot_database.db"
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –≤–∞—Ä–Ω–æ–≤
    cursor.execute(
        """CREATE TABLE IF NOT EXISTS warns (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        chat_id INTEGER NOT NULL,
        reason TEXT,
        issued_by INTEGER NOT NULL,
        issued_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        expires_at TIMESTAMP
    )"""
    )

    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –º—É—Ç–æ–≤
    cursor.execute(
        """CREATE TABLE IF NOT EXISTS mutes (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        chat_id INTEGER NOT NULL,
        reason TEXT,
        issued_by INTEGER NOT NULL,
        issued_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        expires_at TIMESTAMP,
        is_active BOOLEAN DEFAULT TRUE
    )"""
    )

    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –±–∞–Ω–æ–≤
    cursor.execute(
        """CREATE TABLE IF NOT EXISTS bans (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        chat_id INTEGER NOT NULL,
        reason TEXT,
        issued_by INTEGER NOT NULL,
        issued_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        expires_at TIMESTAMP,
        is_active BOOLEAN DEFAULT TRUE
    )"""
    )

    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    cursor.execute(
        """CREATE TABLE IF NOT EXISTS admin_warns (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        reason TEXT,
        issued_by INTEGER NOT NULL,
        issued_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        is_active BOOLEAN DEFAULT TRUE
    )"""
    )

    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    cursor.execute(
        """CREATE TABLE IF NOT EXISTS admins (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL UNIQUE,
        added_by INTEGER NOT NULL,
        added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )"""
    )

    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute(
        """CREATE TABLE IF NOT EXISTS user_activations (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL UNIQUE,
        activated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )"""
    )

    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    cursor.execute(
        """CREATE TABLE IF NOT EXISTS user_ads (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        message_text TEXT NOT NULL,
        sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )"""
    )

    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –Ω–∞—Ä—É—à–µ–Ω–∏–π –ª–∏–º–∏—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    cursor.execute(
        """CREATE TABLE IF NOT EXISTS ad_limit_violations (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        violation_date DATE NOT NULL,
        violation_count INTEGER DEFAULT 1,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )"""
    )

    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –¥–æ–Ω–∞—Ç–æ–≤
    cursor.execute(
        """CREATE TABLE IF NOT EXISTS donations (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        amount REAL,
        currency TEXT DEFAULT 'RUB',
        message TEXT,
        donated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        is_anonymous BOOLEAN DEFAULT FALSE
    )"""
    )

    # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_warns_user_chat ON warns(user_id, chat_id)")
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_warns_expires ON warns(expires_at)")
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_mutes_user_chat ON mutes(user_id, chat_id)")
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_mutes_expires ON mutes(expires_at)")
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_bans_user_chat ON bans(user_id, chat_id)")
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_bans_expires ON bans(expires_at)")
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_user_ads_user_date ON user_ads(user_id, sent_at)")
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_ad_violations_user_date ON ad_limit_violations(user_id, violation_date)")

    conn.commit()
    conn.close()

init_db()

# –¢—Ä–∏–≥–≥–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞
TRIGGER_WORDS = {
    "–∫–∏–Ω–≥": ["–∫–∏–Ω–≥", "king", "–∫i–Ω–≥", "–∫1–Ω–≥", "–∫–∏–Ω–≥", "–∫!–Ω–≥", "–∫@–Ω–≥"],
    "—Ç–µ—Ö–∞—Å": ["—Ç–µ—Ö–∞—Å", "texas", "—Ç3—Ö–∞—Å", "—Ç–µ—Ö–∞$", "—Ç–µ—Ö–∞—Å", "—Çex–∞—Å"],
    "—á–∏–ª–ª": ["—á–∏–ª–ª", "chill", "—á!–ª–ª", "—á–∏ll", "—á1–ª–ª", "—á–∏–ªl"],
    "–∫–æ—Å–º–æ–Ω–∞–≤—Ç": ["–∫–æ—Å–º–æ–Ω–∞–≤—Ç", "–∫–æ—Åmonaut", "–∫0—Å–º–æ–Ω–∞–≤—Ç", "–∫–æ—Å–º–æ–Ω–∞–≤—Ç", "–∫–æ—Å–º–æ–Ω–∞–≤—Ç"],
}

# –ö—Ä–∞—Å–∏–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
RULES_MESSAGE = """
üìú <b>–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞</b> üìú

üö´ <b>1. –°–ø–∞–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏</b>
   ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 1 –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ 1.5 —á–∞—Å–∞
   ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 5 –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –¥–µ–Ω—å
   ‚Ä¢ –õ—é–±–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –í –°–ê–ú–û–ú –æ–±—ä—è–≤–ª–µ–Ω–∏–∏. –ü–æ—Å–ª–µ–¥—É—é—â–µ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –µ–≥–æ —Ä–µ–¥–∞–∫—Ü–∏–µ–π —Ç–æ–∂–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ù–ü–û–û.
   üî• <i>–ù–∞—Ä—É—à–µ–Ω–∏–µ: –º—É—Ç –Ω–∞ 1 -7 –¥–Ω–µ–π (–í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—à–µ–¥—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏) –ø–æ –ø—Ä–∏—á–∏–Ω–µ ¬´–ù–ü–û–û¬ª</i>

‚ö†Ô∏è <b>2. –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –≤–µ–π–ø-—à–æ–ø–æ–≤</b>
   ‚Ä¢ –ó–∞ –∫–∞–∂–¥–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ: <i>1 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</i>
   ‚Ä¢ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: <i>–±–∞–Ω</i>

ü§ñ <b>3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞</b>
   ‚Ä¢ <i>–õ—é–±–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ</i>
   üî• <i>–ù–∞—Ä—É—à–µ–Ω–∏–µ: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º—É—Ç –Ω–∞ 1 –¥–µ–Ω—å</i>

‚ò†Ô∏è <b>4. –†–µ–∫–ª–∞–º–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤</b>
   üî• <i>–ù–∞—Ä—É—à–µ–Ω–∏–µ: –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω + –∑–∞–Ω–µ—Å–µ–Ω–∏–µ –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫</i>

‚õî <b>5. –ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è –∏ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞</b>
   ‚Ä¢ <i>–õ—é–±–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è –∏–ª–∏ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞</i>
   üî• <i>–ù–∞—Ä—É—à–µ–Ω–∏–µ: –º—É—Ç –Ω–∞ 7 –¥–Ω–µ–π</i>

üíé <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –Ω–∞–∫–∞–∑—ã–≤–∞—Ç—å –∑–∞ –¥—Ä—É–≥–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è, –Ω–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª–∞—Ö!</b>
"""

ORDER_MESSAGE = """
üõçÔ∏è <b>–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑?</b> üõçÔ∏è

–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —É –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–∞—Ä–∞—Ö–æ–ª–∫–∏: 
üëâ @darknesss43 (–í–∏–∫–∞) üëà
–∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:
üëâ @barsss_amnyam (–í–ª–∞–¥) üëà

<b>–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞:</b>
1Ô∏è‚É£ –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å
2Ô∏è‚É£ –û–ø–ª–∞—Ç–∏—Ç–µ —Ç–æ–≤–∞—Ä
3Ô∏è‚É£ –û–∂–∏–¥–∞–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É –≤ –∫–æ–Ω—Ü–µ –Ω–µ–¥–µ–ª–∏

üî• <i>–¢–æ–ª—å–∫–æ –ª—É—á—à–∏–µ —Ç–æ–≤–∞—Ä—ã –∏ –±—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞!</i>

üìä <b>–ü—Ä–∞–π—Å:</b> https://t.me/c/2361598273/5
"""

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ –∑–∞–∫–∞–∑–∞–º–∏
last_rules_message_id = None
last_order_message_id = None

async def send_rules_and_order_message():
    global last_rules_message_id, last_order_message_id
    
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if last_rules_message_id:
            try:
                await bot.delete_message(CHAT_ID, last_rules_message_id)
            except:
                pass
                
        if last_order_message_id:
            try:
                await bot.delete_message(CHAT_ID, last_order_message_id)
            except:
                pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        rules_msg = await bot.send_message(CHAT_ID, RULES_MESSAGE, parse_mode="HTML")
        last_rules_message_id = rules_msg.message_id

        await asyncio.sleep(3)
        
        order_msg = await bot.send_message(CHAT_ID, ORDER_MESSAGE, parse_mode="HTML")
        last_order_message_id = order_msg.message_id
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∞–≤–∏–ª: {e}")

async def rules_scheduler():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∞–≤–∏–ª –∫–∞–∂–¥—ã–µ 1.5 —á–∞—Å–∞"""
    while True:
        try:
            await send_rules_and_order_message()
            logger.info("–ü—Ä–∞–≤–∏–ª–∞ –∏ –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –ø—Ä–∞–≤–∏–ª: {e}")
        
        await asyncio.sleep(RULES_INTERVAL.total_seconds())

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    return sqlite3.connect("data/bot_database.db")

def add_warn(user_id: int, chat_id: int, reason: str, issued_by: int):
    conn = get_db_connection()
    cursor = conn.cursor()
    expires_at = datetime.now() + timedelta(days=WARN_EXPIRE_DAYS)
    cursor.execute(
        "INSERT INTO warns (user_id, chat_id, reason, issued_by, expires_at) VALUES (?, ?, ?, ?, ?)",
        (user_id, chat_id, reason, issued_by, expires_at),
    )
    conn.commit()
    conn.close()

def get_user_warns(user_id: int, chat_id: int) -> List[Dict[str, Any]]:
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "SELECT id, reason, issued_at, expires_at FROM warns WHERE user_id = ? AND chat_id = ? AND expires_at > ?",
        (user_id, chat_id, datetime.now()),
    )
    warns = [
        {"id": row[0], "reason": row[1], "issued_at": row[2], "expires_at": row[3]}
        for row in cursor.fetchall()
    ]
    conn.close()
    return warns

def remove_warn(warn_id: int):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("DELETE FROM warns WHERE id = ?", (warn_id,))
    conn.commit()
    conn.close()

def clear_user_warns(user_id: int, chat_id: int):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "DELETE FROM warns WHERE user_id = ? AND chat_id = ?", (user_id, chat_id)
    )
    conn.commit()
    conn.close()

def add_mute(user_id: int, chat_id: int, reason: str, issued_by: int, duration: timedelta = None):
    conn = get_db_connection()
    cursor = conn.cursor()
    expires_at = datetime.now() + duration if duration else None
    cursor.execute(
        "INSERT INTO mutes (user_id, chat_id, reason, issued_by, expires_at) VALUES (?, ?, ?, ?, ?)",
        (user_id, chat_id, reason, issued_by, expires_at),
    )
    conn.commit()
    conn.close()

def add_ban(user_id: int, chat_id: int, reason: str, issued_by: int, duration: timedelta = None):
    conn = get_db_connection()
    cursor = conn.cursor()
    expires_at = datetime.now() + duration if duration else None
    cursor.execute(
        "INSERT INTO bans (user_id, chat_id, reason, issued_by, expires_at) VALUES (?, ?, ?, ?, ?)",
        (user_id, chat_id, reason, issued_by, expires_at),
    )
    conn.commit()
    conn.close()

def add_admin_warn(user_id: int, reason: str, issued_by: int):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO admin_warns (user_id, reason, issued_by) VALUES (?, ?, ?)",
        (user_id, reason, issued_by),
    )
    conn.commit()
    conn.close()

def get_admin_warns(user_id: int) -> List[Dict[str, Any]]:
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "SELECT id, reason, issued_at, issued_by FROM admin_warns WHERE user_id = ? AND is_active = TRUE",
        (user_id,),
    )
    warns = [
        {"id": row[0], "reason": row[1], "issued_at": row[2], "issued_by": row[3]}
        for row in cursor.fetchall()
    ]
    conn.close()
    return warns

def remove_admin_warn(warn_id: int):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE admin_warns SET is_active = FALSE WHERE id = ?", (warn_id,))
    conn.commit()
    conn.close()

def remove_last_admin_warn(user_id: int):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "SELECT id FROM admin_warns WHERE user_id = ? AND is_active = TRUE ORDER BY id DESC LIMIT 1",
        (user_id,)
    )
    result = cursor.fetchone()
    if result:
        cursor.execute("UPDATE admin_warns SET is_active = FALSE WHERE id = ?", (result[0],))
    conn.commit()
    conn.close()
    return result[0] if result else None

def clear_admin_warns(user_id: int):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE admin_warns SET is_active = FALSE WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()

def add_admin(user_id: int, added_by: int):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "INSERT OR IGNORE INTO admins (user_id, added_by) VALUES (?, ?)",
        (user_id, added_by),
    )
    conn.commit()
    conn.close()

def remove_admin(user_id: int):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("DELETE FROM admins WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()

def is_admin(user_id: int) -> bool:
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM admins WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result is not None

def get_all_admins() -> List[int]:
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM admins")
    admins = [row[0] for row in cursor.fetchall()]
    conn.close()
    return admins

def is_user_activated(user_id: int) -> bool:
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "SELECT id FROM user_activations WHERE user_id = ?",
        (user_id,),
    )
    result = cursor.fetchone()
    conn.close()
    return result is not None

def activate_user(user_id: int):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "INSERT OR IGNORE INTO user_activations (user_id) VALUES (?)",
        (user_id,),
    )
    conn.commit()
    conn.close()

def add_user_ad(user_id: int, message_text: str):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO user_ads (user_id, message_text) VALUES (?, ?)",
        (user_id, message_text),
    )
    conn.commit()
    conn.close()

def get_today_ads_count(user_id: int) -> int:
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "SELECT COUNT(*) FROM user_ads WHERE user_id = ? AND DATE(sent_at) = DATE('now')",
        (user_id,),
    )
    count = cursor.fetchone()[0]
    conn.close()
    return count

def get_last_ad_time(user_id: int) -> Optional[datetime]:
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "SELECT sent_at FROM user_ads WHERE user_id = ? ORDER BY sent_at DESC LIMIT 1",
        (user_id,),
    )
    result = cursor.fetchone()
    conn.close()
    return datetime.fromisoformat(result[0]) if result else None

def add_ad_violation(user_id: int):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    conn = get_db_connection()
    cursor = conn.cursor()
    today = datetime.now().date()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
    cursor.execute(
        "SELECT id, violation_count FROM ad_limit_violations WHERE user_id = ? AND violation_date = ?",
        (user_id, today)
    )
    result = cursor.fetchone()
    
    if result:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞—Ä—É—à–µ–Ω–∏–π
        violation_id, count = result
        cursor.execute(
            "UPDATE ad_limit_violations SET violation_count = ? WHERE id = ?",
            (count + 1, violation_id)
        )
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        cursor.execute(
            "INSERT INTO ad_limit_violations (user_id, violation_date) VALUES (?, ?)",
            (user_id, today)
        )
    
    conn.commit()
    conn.close()

def get_today_violations_count(user_id: int) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π –ª–∏–º–∏—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è"""
    conn = get_db_connection()
    cursor = conn.cursor()
    today = datetime.now().date()
    
    cursor.execute(
        "SELECT violation_count FROM ad_limit_violations WHERE user_id = ? AND violation_date = ?",
        (user_id, today)
    )
    result = cursor.fetchone()
    conn.close()
    
    return result[0] if result else 0

# –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ–Ω–∞—Ç–æ–≤
def add_donation(user_id: int, amount: float = None, currency: str = "RUB", message: str = None, is_anonymous: bool = False):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –æ –¥–æ–Ω–∞—Ç–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO donations (user_id, amount, currency, message, is_anonymous) VALUES (?, ?, ?, ?, ?)",
        (user_id, amount, currency, message, is_anonymous),
    )
    conn.commit()
    conn.close()

def get_total_donations() -> float:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é —Å—É–º–º—É –¥–æ–Ω–∞—Ç–æ–≤"""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT SUM(amount) FROM donations WHERE amount IS NOT NULL")
    result = cursor.fetchone()[0]
    conn.close()
    return result or 0.0

def get_recent_donations(limit: int = 10) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–Ω–∞—Ç—ã"""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        """SELECT d.user_id, d.amount, d.currency, d.message, d.donated_at, d.is_anonymous 
           FROM donations d 
           WHERE d.amount IS NOT NULL 
           ORDER BY d.donated_at DESC 
           LIMIT ?""",
        (limit,)
    )
    donations = [
        {
            "user_id": row[0],
            "amount": row[1],
            "currency": row[2],
            "message": row[3],
            "donated_at": row[4],
            "is_anonymous": row[5]
        }
        for row in cursor.fetchall()
    ]
    conn.close()
    return donations

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def get_user_mention(user_id: int) -> str:
    try:
        user = await bot.get_chat(user_id)
        name = user.first_name or user.username or str(user_id)
        return f'<a href="tg://user?id={user_id}">{name}</a>'
    except Exception:
        return str(user_id)

async def format_duration(duration: timedelta) -> str:
    if not duration:
        return "–Ω–∞–≤—Å–µ–≥–¥–∞"

    days = duration.days
    hours, remainder = divmod(duration.seconds, 3600)
    minutes, _ = divmod(remainder, 60)

    parts = []
    if days > 0:
        parts.append(f"{days} –¥.")
    if hours > 0:
        parts.append(f"{hours} —á.")
    if minutes > 0 and days == 0:
        parts.append(f"{minutes} –º–∏–Ω.")

    return " ".join(parts) if parts else "–º–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã"

async def is_owner(user_id: int) -> bool:
    return user_id in ADMIN_IDS

async def is_admin_user(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞ (–∏–∑ ADMIN_IDS –∏–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)"""
    return user_id in ADMIN_IDS or is_admin(user_id)

async def is_chat_admin(user_id: int, chat_id: int = None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞"""
    if not chat_id:
        return False
        
    try:
        member = await bot.get_chat_member(chat_id, user_id)
        return member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞: {e}")
        return False

async def is_bot_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞ (–Ω–µ —á–∞—Ç–∞)"""
    return user_id in ADMIN_IDS or is_admin(user_id)

def parse_time(time_str: str) -> Optional[timedelta]:
    if not time_str:
        return None

    time_str = time_str.lower()
    match = re.match(r"^(\d+)([mhdw]?)$", time_str)
    if not match:
        return None

    num = int(match.group(1))
    unit = match.group(2) or "m"

    if unit == "m":
        return timedelta(minutes=num)
    elif unit == "h":
        return timedelta(hours=num)
    elif unit == "d":
        return timedelta(days=num)
    elif unit == "w":
        return timedelta(weeks=num)
    return None

async def get_user_id_from_message(text: str) -> Optional[int]:
    if not text:
        return None

    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å ID –∏–ª–∏ username –∏–∑ —Ç–µ–∫—Å—Ç–∞
    match = re.match(r"^(?:@?(\w+)|(\d+))$", text.strip())
    if not match:
        return None

    username_or_id = match.group(1) or match.group(2)
    if not username_or_id:
        return None

    if username_or_id.isdigit():
        return int(username_or_id)

    try:
        user = await bot.get_chat(f"@{username_or_id}")
        return user.id
    except Exception:
        return None

async def resolve_user_reference(message: Message, command_args: str = None) -> Optional[Tuple[int, str]]:
    """
    –†–∞–∑—Ä–µ—à–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:
    - –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    - –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö –∫–æ–º–∞–Ω–¥—ã (ID –∏–ª–∏ @username)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (user_id, reason) –∏–ª–∏ None
    """
    user_id = None
    reason = None
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.reply_to_message:
        user_id = message.reply_to_message.from_user.id
        # –ü—Ä–∏—á–∏–Ω–∞ - –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        reason = command_args if command_args else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    elif command_args:
        # –†–∞–∑–¥–µ–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–∏—á–∏–Ω—É
        args = command_args.split(maxsplit=1)
        if args:
            user_id = await get_user_id_from_message(args[0])
            reason = args[1] if len(args) > 1 else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    
    return (user_id, reason) if user_id else None

async def resolve_user_only(message: Message, command_args: str = None) -> Optional[int]:
    """
    –†–∞–∑—Ä–µ—à–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã
    - –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    - –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã (ID –∏–ª–∏ @username)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç user_id –∏–ª–∏ None
    """
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.reply_to_message:
        return message.reply_to_message.from_user.id
    
    # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    elif command_args:
        return await get_user_id_from_message(command_args.split()[0])
    
    return None

def censor_trigger_word(text: str, trigger: str) -> str:
    """–ó–∞–º–µ–Ω—è–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ —Å–ª–æ–≤–æ –Ω–∞ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∏ –∑–≤—ë–∑–¥–æ—á–∫–∏"""
    words = text.split()
    censored_words = []
    
    for word in words:
        lower_word = word.lower()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–≥–æ —Å–ª–æ–≤–∞
        for variant in TRIGGER_WORDS.get(trigger, []):
            if variant in lower_word:
                # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –∑–≤—ë–∑–¥–æ—á–∫–∏
                if len(word) > 1:
                    censored_word = word[0] + '*' * (len(word) - 1)
                    censored_words.append(censored_word)
                else:
                    censored_words.append(word)
                break
        else:
            censored_words.append(word)
    
    return ' '.join(censored_words)

def is_ad_message(text: str) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º"""
    ad_keywords = [
        '–ø—Ä–æ–¥–∞–º', '–ø—Ä–æ–¥–∞—é', '–∫—É–ø–ª—é', '–ø–æ–∫—É–ø–∞—é', '–æ–±–º–µ–Ω', '–º–µ–Ω—è—é', 
        '–æ—Ç–¥–∞–º', '–¥–∞—Ä–æ–º', '–±–µ—Å–ø–ª–∞—Ç–Ω–æ', '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '‚ÇΩ', '—Ä—É–±',
        '—Ç–≥', '—Ç–µ–ª–µ–≥—Ä–∞–º', '–¥–æ—Å—Ç–∞–≤–∫–∞', '–∑–∞–±—Ä–∞—Ç—å', '—Å–∞–º–æ–≤—ã–≤–æ–∑'
    ]
    
    text_lower = text.lower()
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º
    keyword_count = sum(1 for keyword in ad_keywords if keyword in text_lower)
    return keyword_count >= 2 or len(text) > 100  # –î–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–∂–µ —Å—á–∏—Ç–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏

# –§—É–Ω–∫—Ü–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
async def mute_user(chat_id: int, user_id: int, duration: timedelta = None, reason: str = None, is_auto: bool = False) -> bool:
    try:
        permissions = ChatPermissions(
            can_send_messages=False,
            can_send_media_messages=False,
            can_send_polls=False,
            can_send_other_messages=False,
            can_add_web_page_previews=False,
            can_change_info=False,
            can_invite_users=False,
            can_pin_messages=False,
        )
        until_date = datetime.now() + duration if duration else None
        await bot.restrict_chat_member(chat_id, user_id, permissions, until_date=until_date)

        duration_str = await format_duration(duration)
        reason_str = f"\nüìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}" if reason else ""
        user_mention = await get_user_mention(user_id)

        if is_auto:
            message_text = (
                f"ü§ñ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ</b>\n\n"
                f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_mention}\n"
                f"‚è≥ <b>–°—Ä–æ–∫:</b> {duration_str}{reason_str}\n\n"
                f"‚ùó <i>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!</i>"
            )
        else:
            message_text = (
                f"üîá <b>–ú—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
                f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_mention}\n"
                f"‚è≥ <b>–°—Ä–æ–∫:</b> {duration_str}{reason_str}"
            )

        await bot.send_message(chat_id, message_text, parse_mode="HTML")
        add_mute(user_id, chat_id, reason, chat_id, duration)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º—É—Ç–∞: {e}")
        return False

async def unmute_user(chat_id: int, user_id: int) -> bool:
    try:
        permissions = ChatPermissions(
            can_send_messages=True,
            can_send_media_messages=True,
            can_send_polls=True,
            can_send_other_messages=True,
            can_add_web_page_previews=True,
            can_change_info=False,
            can_invite_users=False,
            can_pin_messages=False,
        )
        await bot.restrict_chat_member(chat_id, user_id, permissions)

        # –£–±—Ä–∞–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–º—É—Ç–∞: {e}")
        return False

async def ban_user(chat_id: int, user_id: int, duration: timedelta = None, reason: str = None) -> bool:
    try:
        until_date = datetime.now() + duration if duration else None
        await bot.ban_chat_member(chat_id, user_id, until_date=until_date)

        duration_str = await format_duration(duration)
        reason_str = f"\nüìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}" if reason else ""
        user_mention = await get_user_mention(user_id)

        await bot.send_message(
            chat_id,
            f"üö´ <b>–ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_mention}\n"
            f"‚è≥ <b>–°—Ä–æ–∫:</b> {duration_str}{reason_str}",
            parse_mode="HTML",
        )

        add_ban(user_id, chat_id, reason, chat_id, duration)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–Ω–∞: {e}")
        return False

async def unban_user(chat_id: int, user_id: int) -> bool:
    try:
        await bot.unban_chat_member(chat_id, user_id)

        # –£–±—Ä–∞–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–∞–Ω–∞: {e}")
        return False

async def delete_message(chat_id: int, message_id: int) -> bool:
    try:
        await bot.delete_message(chat_id, message_id)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

async def warn_user(chat_id: int, user_id: int, reason: str = None) -> bool:
    try:
        add_warn(user_id, chat_id, reason, chat_id)
        warns = get_user_warns(user_id, chat_id)

        reason_str = f"\nüìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}" if reason else ""
        user_mention = await get_user_mention(user_id)

        await bot.send_message(
            chat_id,
            f"‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤—ã–¥–∞–Ω–æ</b>\n\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_mention}\n"
            f"üî¢ <b>–í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:</b> {len(warns)}{reason_str}\n"
            f"üìÖ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç:</b> {WARN_EXPIRE_DAYS} –¥–Ω–µ–π",
            parse_mode="HTML",
        )

        if len(warns) >= 3:
            await ban_user(chat_id, user_id, reason="3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")
            clear_user_warns(user_id, chat_id)

        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –≤–∞—Ä–Ω–∞: {e}")
        return False

async def warn_admin(user_id: int, reason: str, issued_by: int) -> bool:
    try:
        add_admin_warn(user_id, reason, issued_by)
        warns = get_admin_warns(user_id)

        reason_str = f"\nüìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}" if reason else ""
        user_mention = await get_user_mention(user_id)
        issued_by_mention = await get_user_mention(issued_by)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        try:
            await bot.send_message(
                user_id,
                f"‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</b>\n\n"
                f"üë§ <b>–ö–æ–º—É:</b> {user_mention}\n"
                f"üëÆ <b>–ö–µ–º –≤—ã–¥–∞–Ω–æ:</b> {issued_by_mention}\n"
                f"üî¢ <b>–í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:</b> {len(warns)}{reason_str}",
                parse_mode="HTML",
            )
        except Exception:
            pass  # –ù–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ª–∏—á–∫—É - –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
        await bot.send_message(
            CHAT_ID,
            f"‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</b>\n\n"
            f"üë§ <b>–ö–æ–º—É:</b> {user_mention}\n"
            f"üëÆ <b>–ö–µ–º –≤—ã–¥–∞–Ω–æ:</b> {issued_by_mention}\n"
            f"üî¢ <b>–í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:</b> {len(warns)}{reason_str}",
            parse_mode="HTML",
        )

        if len(warns) >= 3:
            await bot.send_message(
                CHAT_ID,
                f"üö´ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_mention} —Å–Ω—è—Ç —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∑–∞ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è!</b>",
                parse_mode="HTML",
            )
            remove_admin(user_id)
            clear_admin_warns(user_id)

        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –≤–∞—Ä–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: Message):
    if message.chat.type == ChatType.PRIVATE:
        await message.answer(
            "üëã <b>–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —á–∞—Ç–∞.</b>\n\n"
            "üìã <b>–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n"
            "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π\n"
            "‚Ä¢ –ú—É—Ç/–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏\n\n"
            "üí° <i>–î–ª—è —Ä–∞–±–æ—Ç—ã –¥–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∏ –≤—ã–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!</i>",
            parse_mode="HTML"
        )

@dp.message(Command("help"))
async def cmd_help(message: Message):
    help_text = """
ü§ñ <b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞</b>

üëÆ <b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>
‚Ä¢ /warn [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] [–ø—Ä–∏—á–∏–Ω–∞] - –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
‚Ä¢ /unwarn [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] - —Å–Ω—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
‚Ä¢ /mute [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] [–≤—Ä–µ–º—è] [–ø—Ä–∏—á–∏–Ω–∞] - –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ /unmute [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] - —Ä–∞–∑–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ /ban [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] [–≤—Ä–µ–º—è] [–ø—Ä–∏—á–∏–Ω–∞] - –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ /unban [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] - —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ /warns [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
‚Ä¢ /clearwarns [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è

üëë <b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤:</b>
‚Ä¢ /addadmin [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] - –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞
‚Ä¢ /removeadmin [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] - —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞
‚Ä¢ /adminwarn [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] [–ø—Ä–∏—á–∏–Ω–∞] - –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
‚Ä¢ /unadminwarn [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] - —Å–Ω—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
‚Ä¢ /adminwarns [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
‚Ä¢ /clearadminwarns [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
‚Ä¢ /admins - —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞

üìä <b>–û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /rules - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞
‚Ä¢ /order - –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑
‚Ä¢ /donate - –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑–≤–∏—Ç–∏–µ –±–æ—Ç–∞
‚Ä¢ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üí° <i>–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</i>
"""
    await message.answer(help_text, parse_mode="HTML")

@dp.message(Command("rules"))
async def cmd_rules(message: Message):
    await message.answer(RULES_MESSAGE, parse_mode="HTML")

@dp.message(Command("order"))
async def cmd_order(message: Message):
    await message.answer(ORDER_MESSAGE, parse_mode="HTML")

@dp.message(Command("donate"))
async def cmd_donate(message: Message):
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üí≥ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", url=DONATE_LINK)
    
    await message.answer(
        DONATE_MESSAGE.format(donate_link=DONATE_LINK),
        parse_mode="HTML",
        reply_markup=keyboard.as_markup()
    )

@dp.message(Command("stats"))
async def cmd_stats(message: Message):
    if not await is_bot_admin(message.from_user.id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞!")
        return

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–Ω–æ–≤
    cursor.execute("SELECT COUNT(*) FROM warns WHERE expires_at > ?", (datetime.now(),))
    active_warns = cursor.fetchone()[0]
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º—É—Ç–æ–≤
    cursor.execute("SELECT COUNT(*) FROM mutes WHERE is_active = TRUE AND (expires_at IS NULL OR expires_at > ?)", (datetime.now(),))
    active_mutes = cursor.fetchone()[0]
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–Ω–æ–≤
    cursor.execute("SELECT COUNT(*) FROM bans WHERE is_active = TRUE AND (expires_at IS NULL OR expires_at > ?)", (datetime.now(),))
    active_bans = cursor.fetchone()[0]
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    cursor.execute("SELECT COUNT(*) FROM admins")
    admins_count = cursor.fetchone()[0]
    
    # –û–±—â–∞—è —Å—É–º–º–∞ –¥–æ–Ω–∞—Ç–æ–≤
    total_donations = get_total_donations()
    
    conn.close()

    stats_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        f"‚ö†Ô∏è <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:</b> {active_warns}\n"
        f"üîá <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –º—É—Ç—ã:</b> {active_mutes}\n"
        f"üö´ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –±–∞–Ω—ã:</b> {active_bans}\n"
        f"üëÆ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞:</b> {admins_count}\n"
        f"üí∞ <b>–û–±—â–∞—è —Å—É–º–º–∞ –¥–æ–Ω–∞—Ç–æ–≤:</b> {total_donations:.2f} RUB\n\n"
        f"üîÑ <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )
    
    await message.answer(stats_text, parse_mode="HTML")

@dp.message(Command("warn"))
async def cmd_warn(message: Message, command: CommandObject):
    if not await is_chat_admin(message.from_user.id, message.chat.id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞!")
        return

    user_id, reason = await resolve_user_reference(message, command.args)
    if not user_id:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ @username/id)")
        return

    if await is_chat_admin(user_id, message.chat.id):
        await message.answer("‚ùå –ù–µ–ª—å–∑—è –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
        return

    success = await warn_user(message.chat.id, user_id, reason)
    if success:
        await message.delete()
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è!")

@dp.message(Command("unwarn"))
async def cmd_unwarn(message: Message, command: CommandObject):
    if not await is_chat_admin(message.from_user.id, message.chat.id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞!")
        return

    user_id = await resolve_user_only(message, command.args)
    if not user_id:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ @username/id)")
        return

    warns = get_user_warns(user_id, message.chat.id)
    if not warns:
        await message.answer("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π!")
        return

    remove_warn(warns[-1]["id"])
    user_mention = await get_user_mention(user_id)
    
    await message.answer(
        f"‚úÖ <b>–°–Ω—è—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</b>\n\n"
        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_mention}\n"
        f"üî¢ <b>–û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:</b> {len(warns) - 1}",
        parse_mode="HTML"
    )

@dp.message(Command("warns"))
async def cmd_warns(message: Message, command: CommandObject):
    if not await is_chat_admin(message.from_user.id, message.chat.id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞!")
        return

    user_id = await resolve_user_only(message, command.args)
    if not user_id:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ @username/id)")
        return

    warns = get_user_warns(user_id, message.chat.id)
    user_mention = await get_user_mention(user_id)

    if not warns:
        await message.answer(f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_mention} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π!")
        return

    warns_text = "\n".join(
        f"‚Ä¢ {warn['reason']} ({warn['issued_at'][:10]}, –∏—Å—Ç–µ–∫–∞–µ—Ç: {warn['expires_at'][:10]})"
        for warn in warns
    )

    await message.answer(
        f"‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_mention}</b>\n\n"
        f"üî¢ <b>–í—Å–µ–≥–æ:</b> {len(warns)}\n\n"
        f"üìã <b>–°–ø–∏—Å–æ–∫:</b>\n{warns_text}",
        parse_mode="HTML"
    )

@dp.message(Command("clearwarns"))
async def cmd_clearwarns(message: Message, command: CommandObject):
    if not await is_chat_admin(message.from_user.id, message.chat.id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞!")
        return

    user_id = await resolve_user_only(message, command.args)
    if not user_id:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ @username/id)")
        return

    clear_user_warns(user_id, message.chat.id)
    user_mention = await get_user_mention(user_id)
    
    await message.answer(
        f"‚úÖ <b>–í—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Å–Ω—è—Ç—ã</b>\n\n"
        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_mention}",
        parse_mode="HTML"
    )

@dp.message(Command("mute"))
async def cmd_mute(message: Message, command: CommandObject):
    if not await is_chat_admin(message.from_user.id, message.chat.id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞!")
        return

    args = command.args.split() if command.args else []
    user_id = await resolve_user_only(message, command.args)
    
    if not user_id:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ @username/id)")
        return

    if await is_chat_admin(user_id, message.chat.id):
        await message.answer("‚ùå –ù–µ–ª—å–∑—è –∑–∞–º—É—Ç–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return

    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏ –ø—Ä–∏—á–∏–Ω—É
    duration = None
    reason = None
    
    if args:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è
        if len(args) > 1:
            time_arg = args[1]
            duration = parse_time(time_arg)
        
        # –ü—Ä–∏—á–∏–Ω–∞ - –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        if len(args) > 2:
            reason = ' '.join(args[2:])
        elif len(args) == 2 and not duration:
            # –ï—Å–ª–∏ –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ –≤—Ä–µ–º—è, —Ç–æ —ç—Ç–æ –ø—Ä–∏—á–∏–Ω–∞
            reason = args[1]
    
    # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
    if not duration:
        duration = MUTE_DURATION

    success = await mute_user(message.chat.id, user_id, duration, reason)
    if success:
        await message.delete()
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")

@dp.message(Command("unmute"))
async def cmd_unmute(message: Message, command: CommandObject):
    if not await is_chat_admin(message.from_user.id, message.chat.id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞!")
        return

    user_id = await resolve_user_only(message, command.args)
    if not user_id:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ @username/id)")
        return

    success = await unmute_user(message.chat.id, user_id)
    if success:
        await message.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–º—É—á–µ–Ω!")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º—É—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")

@dp.message(Command("ban"))
async def cmd_ban(message: Message, command: CommandObject):
    if not await is_chat_admin(message.from_user.id, message.chat.id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞!")
        return

    args = command.args.split() if command.args else []
    user_id = await resolve_user_only(message, command.args)
    
    if not user_id:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ @username/id)")
        return

    if await is_chat_admin(user_id, message.chat.id):
        await message.answer("‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return

    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏ –ø—Ä–∏—á–∏–Ω—É
    duration = None
    reason = None
    
    if args:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è
        if len(args) > 1:
            time_arg = args[1]
            duration = parse_time(time_arg)
        
        # –ü—Ä–∏—á–∏–Ω–∞ - –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        if len(args) > 2:
            reason = ' '.join(args[2:])
        elif len(args) == 2 and not duration:
            # –ï—Å–ª–∏ –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ –≤—Ä–µ–º—è, —Ç–æ —ç—Ç–æ –ø—Ä–∏—á–∏–Ω–∞
            reason = args[1]

    success = await ban_user(message.chat.id, user_id, duration, reason)
    if success:
        await message.delete()
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")

@dp.message(Command("unban"))
async def cmd_unban(message: Message, command: CommandObject):
    if not await is_chat_admin(message.from_user.id, message.chat.id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞!")
        return

    user_id = await resolve_user_only(message, command.args)
    if not user_id:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ @username/id)")
        return

    success = await unban_user(message.chat.id, user_id)
    if success:
        await message.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω!")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")

@dp.message(Command("addadmin"))
async def cmd_addadmin(message: Message, command: CommandObject):
    if not await is_owner(message.from_user.id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞!")
        return

    user_id = await resolve_user_only(message, command.args)
    if not user_id:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ @username/id)")
        return

    if is_admin(user_id):
        await message.answer("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
        return

    add_admin(user_id, message.from_user.id)
    user_mention = await get_user_mention(user_id)
    
    await message.answer(
        f"‚úÖ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω</b>\n\n"
        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_mention}\n"
        f"üëÆ <b>–î–æ–±–∞–≤–∏–ª:</b> {await get_user_mention(message.from_user.id)}",
        parse_mode="HTML"
    )

@dp.message(Command("removeadmin"))
async def cmd_removeadmin(message: Message, command: CommandObject):
    if not await is_owner(message.from_user.id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞!")
        return

    user_id = await resolve_user_only(message, command.args)
    if not user_id:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ @username/id)")
        return

    if not is_admin(user_id):
        await message.answer("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
        return

    remove_admin(user_id)
    user_mention = await get_user_mention(user_id)
    
    await message.answer(
        f"‚úÖ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª—ë–Ω</b>\n\n"
        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_mention}\n"
        f"üëÆ <b>–£–¥–∞–ª–∏–ª:</b> {await get_user_mention(message.from_user.id)}",
        parse_mode="HTML"
    )

@dp.message(Command("admins"))
async def cmd_admins(message: Message):
    if not await is_bot_admin(message.from_user.id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞!")
        return

    admins = get_all_admins()
    owner_mentions = [await get_user_mention(admin_id) for admin_id in ADMIN_IDS]
    admin_mentions = [await get_user_mention(admin_id) for admin_id in admins]
    
    text = "üëë <b>–í–ª–∞–¥–µ–ª—å—Ü—ã –±–æ—Ç–∞:</b>\n" + "\n".join(owner_mentions) if owner_mentions else "üëë <b>–í–ª–∞–¥–µ–ª—å—Ü—ã –±–æ—Ç–∞:</b> –ù–µ —É–∫–∞–∑–∞–Ω—ã"
    text += "\n\nüëÆ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞:</b>\n" + "\n".join(admin_mentions) if admin_mentions else "\n\nüëÆ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞:</b> –ù–µ—Ç"
    
    await message.answer(text, parse_mode="HTML")

@dp.message(Command("adminwarn"))
async def cmd_adminwarn(message: Message, command: CommandObject):
    if not await is_owner(message.from_user.id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞!")
        return

    user_id, reason = await resolve_user_reference(message, command.args)
    if not user_id:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ @username/id)")
        return

    if not is_admin(user_id):
        await message.answer("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
        return

    success = await warn_admin(user_id, reason, message.from_user.id)
    if success:
        await message.delete()
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")

@dp.message(Command("unadminwarn"))
async def cmd_unadminwarn(message: Message, command: CommandObject):
    if not await is_owner(message.from_user.id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞!")
        return

    user_id = await resolve_user_only(message, command.args)
    if not user_id:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ @username/id)")
        return

    if not is_admin(user_id):
        await message.answer("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
        return

    warn_id = remove_last_admin_warn(user_id)
    if not warn_id:
        await message.answer("‚ùå –£ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π!")
        return

    user_mention = await get_user_mention(user_id)
    warns = get_admin_warns(user_id)
    
    await message.answer(
        f"‚úÖ <b>–°–Ω—è—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</b>\n\n"
        f"üë§ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> {user_mention}\n"
        f"üî¢ <b>–û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:</b> {len(warns)}",
        parse_mode="HTML"
    )

@dp.message(Command("adminwarns"))
async def cmd_adminwarns(message: Message, command: CommandObject):
    if not await is_bot_admin(message.from_user.id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞!")
        return

    user_id = await resolve_user_only(message, command.args)
    if not user_id:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ @username/id)")
        return

    if not is_admin(user_id):
        await message.answer("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
        return

    warns = get_admin_warns(user_id)
    user_mention = await get_user_mention(user_id)

    if not warns:
        await message.answer(f"‚úÖ –£ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user_mention} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π!")
        return

    warns_text = "\n".join(
        f"‚Ä¢ {warn['reason']} ({warn['issued_at'][:10]}, –≤—ã–¥–∞–ª: {await get_user_mention(warn['issued_by'])})"
        for warn in warns
    )

    await message.answer(
        f"‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user_mention}</b>\n\n"
        f"üî¢ <b>–í—Å–µ–≥–æ:</b> {len(warns)}\n\n"
        f"üìã <b>–°–ø–∏—Å–æ–∫:</b>\n{warns_text}",
        parse_mode="HTML"
    )

@dp.message(Command("clearadminwarns"))
async def cmd_clearadminwarns(message: Message, command: CommandObject):
    if not await is_owner(message.from_user.id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞!")
        return

    user_id = await resolve_user_only(message, command.args)
    if not user_id:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ @username/id)")
        return

    if not is_admin(user_id):
        await message.answer("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
        return

    clear_admin_warns(user_id)
    user_mention = await get_user_mention(user_id)
    
    await message.answer(
        f"‚úÖ <b>–í—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–Ω—è—Ç—ã</b>\n\n"
        f"üë§ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> {user_mention}",
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.chat.type.in_({ChatType.GROUP, ChatType.SUPERGROUP}))
async def handle_group_message(message: Message):
    try:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
        if message.from_user.is_bot:
            return

        user_id = message.from_user.id
        chat_id = message.chat.id
        text = message.text or message.caption or ""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if not is_user_activated(user_id):
            activate_user(user_id)
            # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –ø–æ–∫–∞ –ø—Ä–æ–ø—É—Å—Ç–∏–º

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞
        text_lower = text.lower()
        for trigger, variants in TRIGGER_WORDS.items():
            for variant in variants:
                if variant in text_lower:
                    # –¶–µ–Ω–∑—É—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    censored_text = censor_trigger_word(text, trigger)
                    await delete_message(chat_id, message.message_id)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ü–µ–Ω–∑—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    warning_msg = await message.answer(
                        f"‚ö†Ô∏è <b>–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç—Ü–µ–Ω–∑—É—Ä–∏—Ä–æ–≤–∞–Ω–æ</b>\n\n"
                        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {await get_user_mention(user_id)}\n"
                        f"üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞\n\n"
                        f"üí¨ <b>–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{censored_text}",
                        parse_mode="HTML"
                    )
                    
                    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
                    await asyncio.sleep(10)
                    await warning_msg.delete()
                    return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        if is_ad_message(text):
            today_ads = get_today_ads_count(user_id)
            last_ad_time = get_last_ad_time(user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≤ –¥–µ–Ω—å
            if today_ads >= MAX_ADS_PER_DAY:
                violations_count = get_today_violations_count(user_id)
                mute_duration = MUTE_DURATION * (violations_count + 1)
                
                await delete_message(chat_id, message.message_id)
                await mute_user(
                    chat_id, 
                    user_id, 
                    mute_duration, 
                    f"–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π ({today_ads}/{MAX_ADS_PER_DAY} –≤ –¥–µ–Ω—å)", 
                    is_auto=True
                )
                add_ad_violation(user_id)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
            if last_ad_time:
                time_since_last_ad = datetime.now() - last_ad_time
                if time_since_last_ad < MIN_AD_INTERVAL:
                    violations_count = get_today_violations_count(user_id)
                    mute_duration = MUTE_DURATION * (violations_count + 1)
                    
                    await delete_message(chat_id, message.message_id)
                    await mute_user(
                        chat_id, 
                        user_id, 
                        mute_duration, 
                        f"–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π ({time_since_last_ad.seconds//60} –º–∏–Ω. –≤–º–µ—Å—Ç–æ {MIN_AD_INTERVAL.total_seconds()//60} –º–∏–Ω.)", 
                        is_auto=True
                    )
                    add_ad_violation(user_id)
                    return
            
            # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            add_user_ad(user_id, text)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –æ–±—ã—á–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        if text.startswith('/') and not await is_chat_admin(user_id, chat_id):
            command = text.split()[0][1:].split('@')[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –±–µ–∑ / –∏ @username
            if command in ['warn', 'mute', 'ban', 'unwarn', 'unmute', 'unban', 'warns', 'clearwarns']:
                await delete_message(chat_id, message.message_id)
                await mute_user(
                    chat_id, 
                    user_id, 
                    MUTE_DURATION, 
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞", 
                    is_auto=True
                )
                return

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
@dp.chat_member()
async def handle_chat_member_update(update: ChatMemberUpdated):
    try:
        if update.new_chat_member.status == ChatMemberStatus.MEMBER:
            # –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è
            user_mention = await get_user_mention(update.new_chat_member.user.id)
            welcome_text = (
                f"üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç, {user_mention}!</b>\n\n"
                f"üìú –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏: /rules\n"
                f"üõçÔ∏è –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑: /order\n"
                f"ü§ñ –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: /help\n\n"
                f"üí° <i>–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!</i>"
            )
            await bot.send_message(update.chat.id, welcome_text, parse_mode="HTML")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@dp.errors()
async def errors_handler(update, exception):
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {update}: {exception}")
    return True

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∞–≤–∏–ª
    asyncio.create_task(rules_scheduler())
    
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    await bot.delete_webhook(drop_pending_updates=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
